#!/bin/bash

# Source common functions
source /common_functions

merge_subtitles () {
  if [ -f "${WORKING_DIR}/normalized/${NAME}.subtitles.mkv" ]; then
    # Merge subtitles
    log "console" "Merging subtitles."
    if [ "${FFMPEG_LOG_LEVEL}" = "info" ]; then
      log "console"
    fi

    ffmpeg \
      -hide_banner \
      -loglevel ${FFMPEG_LOG_LEVEL} \
      -i "${WORKING_DIR}/normalized/${FILE}" \
      -i "${WORKING_DIR}/normalized/${NAME}.subtitles.mkv" \
      -map 0:0 -map 0:1 -map 0:2 -map 1:0 \
      -c:v:0 copy \
      -c:a:0 copy \
      -c:a:1 copy \
      -c:s:0 copy \
      -disposition:s:0 default \
      -metadata:s:s:0 language=${SUBTITLE_TRACK_LANGUAGE} \
      "${WORKING_DIR}/normalized/out.mkv" 2>&1

    if [ "${FFMPEG_LOG_LEVEL}" = "info" ]; then
      log "console"
    fi
    mv "${WORKING_DIR}/normalized/out.mkv" "${WORKING_DIR}/normalized/${FILE}"
  else
    log "console" "Merging subtitles failed."
  fi
}

move () {
  if [ -f "${WORKING_DIR}/normalized/${FILE}" ] && [ -w "${INPUT_DIR}" ]; then
    log "console" "Moving normalized file."
    rm "${INPUT}"
    mv "${WORKING_DIR}/normalized/${FILE}" "${INPUT}"

    # Add a status file
    if [ ! -f "${INPUT_DIR}/.transcoded" ]; then
      touch "${INPUT_DIR}/.transcoded"
    fi
    log "console" "Recording mtime of completed file."
    stat -c %Y "${INPUT_DIR}/${FILE}" >> "${INPUT_DIR}/.transcoded"

    # Set permissions
    log "console" "Setting permissions."
    chown -R nobody:nogroup "${INPUT_DIR}"

    # Update position of the file in the queue
    update_position "4"
  fi
}

normalize () {
  # Normalize the audio
  log "console" "Normalizing audio."
  if [ "${FFMPEG_LOG_LEVEL}" = "info" ]; then
    log "console"
  fi

  ffmpeg-normalize \
    -c:a ac3 \
    -b:a 640k \
    -ar 48000 \
    -v "${WORKING_DIR}/transcoded/${FILE}" \
    -o "${WORKING_DIR}/normalized/${FILE}"

  if [ "${FFMPEG_LOG_LEVEL}" = "info" ]; then
    log "console"
  fi

  # Update the position of the file in the queue
  update_position "3"
}

# Notify Slack
slack () {
  ACTION=$1
  EMOJI=":clapper:"

  if [ "${SLACK_ENABLED}" = "true" ]; then
    log "console" "Notifying Slack."
    if [ "${ACTION}" == "start" ]; then
      COLOR="good"
      PRETEXT="Transcoding started for:"
    elif [ "${ACTION}" == "complete" ]; then
      COLOR="good"
      PRETEXT="Transcoding complete for:"
    elif [ "${ACTION}" == "failed" ]; then
      COLOR="danger"
      PRETEXT="Transcoding failed for:"
    elif [ "${ACTION}" == "queued" ]; then
      COLOR="warning"
      PRETEXT="Queued the following for transcoding:"
    fi
    PAYLOAD="payload={\"channel\": \"${SLACK_CHANNEL}\", \"username\": \"${SLACK_USERNAME}\", \"icon_emoji\": \"${EMOJI}\", \"attachments\": [{\"color\": \"${COLOR}\", \"pretext\": \"${PRETEXT}\", \"fields\": [{\"title\": \"${NAME}\"}]}]}"
    curl -s -X POST --data-urlencode "${PAYLOAD}" "${SLACK_WEBHOOK_URL}" >> /dev/null
  fi
}

reduce () {
  if [ -f "${INPUT}" ]; then
    # Reduce the file to a single video/audio track
    log "console" "Reducing to single video/audio track."
    if [ "${FFMPEG_LOG_LEVEL}" = "info" ]; then
      log "console"
    fi

    ffmpeg \
      -hide_banner \
      -loglevel ${FFMPEG_LOG_LEVEL} \
      -i "${INPUT}" \
      -map_metadata -1 \
      -map_chapters -1 \
      -map 0:${VIDEO_TRACK} -map 0:${AUDIO_TRACK} \
      -c:v copy \
      -c:a copy \
      "${WORKING_DIR}/reduced/${FILE}" 2>&1

    if [ "${FFMPEG_LOG_LEVEL}" = "info" ]; then
      log "console"
    fi

    # Update the position of the file in the queue
    update_position "1"
  else
    # Update position of file in the queue
    update_position "99"
    log "console" "Reduction of input file failed."
  fi
}

rip_subtitles () {
  if [ -f "${INPUT}" ]; then
    log "console" "Ripping subtitles."
    if [ "${FFMPEG_LOG_LEVEL}" = "info" ]; then
      log "console"
    fi

    ffmpeg \
      -hide_banner \
      -loglevel ${FFMPEG_LOG_LEVEL} \
      -i "${INPUT}" \
      -map_metadata -1 \
      -map_chapters -1 \
      -map 0:${SUBTITLE_TRACK} \
      -c:s copy \
      "${WORKING_DIR}/transcoded/${NAME}.subtitles.mkv" 2>&1

    if [ "${FFMPEG_LOG_LEVEL}" = "info" ]; then
      log "console"
    fi
  else
    # Update position of file in the queue
    update_position "99"
    log "console" "Ripping subtitles failed."
  fi
}

transcode () {
  # Transcode the file
  log "console" "Transcoding."
  if [ "${FFMPEG_LOG_LEVEL}" = "info" ]; then
    log "console"
  fi

  ffmpeg \
    -hide_banner \
    -loglevel ${FFMPEG_LOG_LEVEL} \
    -i "${WORKING_DIR}/reduced/${FILE}" \
    -map_metadata -1 \
    -map_chapters -1 \
    -map 0:0 -map 0:1 \
    -c:v libx265 \
    -crf 15 \
    -preset fast \
    -c:a:0 ac3 \
    -b:a:0 640k \
    -metadata:s:a:0 language=${AUDIO_LANGUAGE} \
    "${WORKING_DIR}/transcoded/${FILE}" 2>&1

  if [ "${FFMPEG_LOG_LEVEL}" = "info" ]; then
    log "console"
  fi

  # Update the position of the file in the queue
  update_position "2"
}

update_position () {
  POSITION=$1
  sqlite3 ${DB} "UPDATE inputs SET position=\"${POSITION}\" WHERE file=\"${INPUT}\";"
}

# Run in a loop as long as there is work to do...
while [ $(sqlite3 ${DB} "SELECT COUNT(*) FROM inputs WHERE position = '0';") -gt 0 ] && [ ! -f /config/transcoder.stop ]; do
  # Only split on newlines
  IFS=$'\n'

  # Process the queue
  for INPUT in $(sqlite3 ${DB} "SELECT file FROM inputs WHERE position='0' LIMIT 1;"); do

    # Create the working directory
    working_directory

    # Set the input file as a global variable, and generate the rest
    export INPUT="${INPUT}"
    global_variables

    # Notify Slack
    slack "start"

    # Do all the things
    log "console" "Beginning transcode for: ${NAME}"
    log "console" "Input directory: ${INPUT_DIR}"
    log "console" "File name: ${FILE}"

    # Record duration of file before transcoding
    export BEFORE_DURATION=$(ffprobe -v error -select_streams v:0 -show_format "${INPUT}" | grep "duration" | awk -F'=' '{print $2}' | awk -F'.' '{print $1}')
    sqlite3 ${DB} "UPDATE inputs SET before_duration=\"${BEFORE_DURATION}\" WHERE file=\"${INPUT}\";"

    # Reduce the file to a single video and audio track
    reduce

    if [ $(sqlite3 ${DB} "SELECT position FROM inputs WHERE file = \"${INPUT}\";") != 99 ]; then
      transcode
    fi

    if [ $(sqlite3 ${DB} "SELECT position FROM inputs WHERE file = \"${INPUT}\";") != 99 ]; then
      normalize
    fi

    if [ "${SUBTITLES}" = "1" ]; then
      if [ $(sqlite3 ${DB} "SELECT position FROM inputs WHERE file = \"${INPUT}\";") != 99 ]; then
        rip_subtitles
      fi
      if [ $(sqlite3 ${DB} "SELECT position FROM inputs WHERE file = \"${INPUT}\";") != 99 ]; then
        merge_subtitles
      fi
    fi

    if [ $(sqlite3 ${DB} "SELECT position FROM inputs WHERE file = \"${INPUT}\";") != 99 ]; then
      move
    fi

    if [ $(sqlite3 ${DB} "SELECT position FROM inputs WHERE file = \"${INPUT}\";") != 99 ]; then
      cleanup
    fi

    if [ $(sqlite3 ${DB} "SELECT position FROM inputs WHERE file = \"${INPUT}\";") != 99 ]; then
      slack "complete" "${NAME}"
      log "console" "Ending transcode for: ${NAME}"
    else
      log "console" "Transcoding failed for: ${NAME}"
      log "console" "Working directory: '${WORKING_DIR}'"
      slack "failed"
    fi
  done
done
log "console" "Stopping transcoder."
