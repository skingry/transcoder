# Source unique variables
if [ -f ${RUNNING_DIR}/transcoder.conf ]; then
  source ${RUNNING_DIR}/transcoder.conf
else
  echo "No configuration file present."
  exit 1
fi

# Db location
export DB="${RUNNING_DIR}/transcoder.db"

# Check for the existence of the database
if [ ! -f ${DB} ]; then
  sqlite3 ${DB} "CREATE TABLE inputs(file text NOT NULL, video_track integer DEFAULT 0, audio_track integer DEFAULT 1, audio_language varchar(3) DEFAULT eng, position smallint DEFAULT 0, subtitle_track int DEFAULT 2, before_duration text DEFAULT NULL, after_duration text DEFAULT NULL);"
fi

# Cleanup
cleanup () {
  rm -rf ${WORKING_DIR}
}

# Generate global variables
global_variables () {
  export FILE=$(basename "${INPUT}")
  export NAME=${FILE%.*}
  export INPUT_DIR=$(dirname "${INPUT}")
  export DIR_NAME=$(basename "${INPUT_DIR}")
  export VIDEO_TRACK=$(sqlite3 ${DB} "SELECT video_track FROM inputs WHERE file=\"${INPUT}\";";)
  export AUDIO_TRACK=$(sqlite3 ${DB} "SELECT audio_track FROM inputs WHERE file=\"${INPUT}\";";)
  export LANGUAGE=$(sqlite3 ${DB} "SELECT audio_language FROM inputs WHERE file=\"${INPUT}\";";)
  export SUBTITLE_TRACK=$(sqlite3 ${DB} "SELECT subtitle_track FROM inputs WHERE file=\"${INPUT}\";")
}

# Output log line
log () {
  LOCATION=$1
  LOG_LINE=$2

  if [ "${LOCATION}" == "console" ]; then
    if [ "${LOG_LINE}" == "" ]; then
      echo
    else
      echo "$(date +%Y-%m-%d-%H:%M:%S) -- ${LOG_LINE}"
    fi
  elif [ "${LOCATION}" == "file" ]; then
    if [ "${LOG_LINE}" == "" ]; then
      echo >> ${RUNNING_DIR}/logs/${NAME}.log
    else
      echo "$(date +%Y-%m-%d-%H:%M:%S) -- ${LOG_LINE}" >> ${RUNNING_DIR}/logs/${NAME}.log
    fi
  fi
}

# Notify Slack
notify () {
  ACTION=$1
  ITEM=$2
  EMOJI=":clapper:"

  if [ "${SLACK_ENABLED}" == "true" ]; then
    log "console" "Notifying Slack."

    if [ "${ACTION}" == "start" ]; then
      COLOR="good"
      PRETEXT="Transcoding started for:"
    elif [ "${ACTION}" == "complete" ]; then
      COLOR="good"
      PRETEXT="Transcoding complete for:"
    elif [ "${ACTION}" == "failed" ]; then
      COLOR="danger"
      PRETEXT="Transcoding failed for:"
    elif [ "${ACTION}" == "queued" ]; then
      COLOR="warning"
      PRETEXT="Queued the following for transcoding:"
    fi

    PAYLOAD="payload={\"channel\": \"${SLACK_CHANNEL}\", \"username\": \"${SLACK_USERNAME}\", \"icon_emoji\": \"${EMOJI}\", \"attachments\": [{\"color\": \"${COLOR}\", \"pretext\": \"${PRETEXT}\", \"fields\": [{\"title\": \"${ITEM}\"}]}]}"

    curl -s -X POST --data-urlencode "${PAYLOAD}" "${SLACK_WEBHOOK_URL}" >> /dev/null
  fi
}

# Define working directories
log "console" "Creating working directory."
export WORKING_DIR=$(mktemp -d -t transcoder.XXXX)
mkdir ${WORKING_DIR}/reduced
mkdir ${WORKING_DIR}/normalized
mkdir ${WORKING_DIR}/transcoded

